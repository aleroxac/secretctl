#!/usr/bin/env bash


## ---------------------------------------------------------------
##        DATE: 2024-07-03
## DESCRIPTION: A CLI to make secret handling easier
##      AUTHOR: Augusto Cardoso dos Santos <acardoso.devops@gmail.com>
##     VERSION: 1.0.0
##
## CHANGELOG:
## 2024-07-03 | 1.0.0 - the beginning of everything
## ---------------------------------------------------------------



## ---------- CONSTANTS
DEFAULT_LOG_LEVEL="DEBUG"
DEFAULT_LOG_TO_FILE="false"
DEFAULT_LOG_OUTPUT_FILE_PATH="${PWD}/execution.log"



## ---------- UTILS
function logger() {
    [[ -z "${LOG_LEVEL}" ]]   && LOG_LEVEL="${DEFAULT_LOG_LEVEL}"
    [[ -z "${LOG_TO_FILE}" ]] && LOG_TO_FILE="${DEFAULT_LOG_TO_FILE}"
    [[ "${LOG_TO_FILE}" == "true" ]] && LOG_OUTPUT="${DEFAULT_LOG_OUTPUT_FILE_PATH}" || LOG_OUTPUT="/dev/null"

    TIMESTAMP=$(date +'%Y/%m/%d %H:%M:%S')
    LEVEL=$1
    CLASS=$2
    MESSAGE=$3

    case "${LOG_LEVEL}" in
        "ERROR")
            echo -e "${TIMESTAMP} [${LEVEL}] [${CLASS}] - ${MESSAGE}" | grep -E "\[ERROR\]" | tee --output-error=warn -a "${LOG_OUTPUT}"
            ;;
        "WARN")
            echo -e "${TIMESTAMP} [${LEVEL}] [${CLASS}] - ${MESSAGE}" | grep -E "\[WARN\]" | tee --output-error=warn -a "${LOG_OUTPUT}"
            ;;
        "INFO")
            echo -e "${TIMESTAMP} [${LEVEL}] [${CLASS}] - ${MESSAGE}" | grep -E "\[INFO|WARN\]" | tee --output-error=warn -a "${LOG_OUTPUT}"
            ;;
        "DEBUG")
            echo -e "${TIMESTAMP} [${LEVEL}] [${CLASS}] - ${MESSAGE}" | tee --output-error=warn -a "${LOG_OUTPUT}"
            ;;
        *)
            echo -e "Invalid LOG_LEVEL: ${LOG_LEVEL}. Please choice one of these: ERROR, WARN, INFO, DEBUG"
            exit 1
        ;;
    esac
}

function usage() {
    echo "
    secretctl is a CLI to make secret handling easier

    USAGE: secretctl [OPTIONS] [COMMAND OPTIONS]...

    OPTIONS:
        -p, --project <gcp_project_id>   Specify the GCP project ID.  [optional]
    
    NOTES:
        [1] If the option -p or --project not set, the current GCP project ID will be used.

    COMMANDS:
        help
            Print this help message
        
        list
            List secrets
        
        search
            Search for secrets based on a REGEX pattern
        
        get [SECRET_NAME]
            Get the secret content
        
        create [SECRET_NAME] [SECRET_FILE]
            Create a new secret
        
        update [SECRET_NAME] [SECRET_FILE]
            Update a secret based on a secret_file with the new content

            OPTIONS:
                -d, --disable   Disable the previous version of the target secret       [optional]

        patch [SECRET_NAME] [PATCH_FILE]
            Update a secret based on patch_file with lines that should to be changed

            OPTIONS:
                -d, --disable   Disable the previous version of the target secret       [optional]

        disable [SECRET_NAME] [SECRET_VERSION]
            Disable a secret version

        enable [SECRET_NAME] [SECRET_VERSION]
            Enable a secret version

        delete [SECRET_NAME]
            Delete a secret

        diff [SECRET_NAME_1] [SECRET_NAME_2]
            Compare two secrets

        diff [SECRET_NAME_PATTERN] [DATA_PATTERN]
            Look for secrets with a specific pattern name and data pattern

    EXAMPLES:
        secretctl list
        secretctl create app-dev /tmp/secrets/app-dev-v1.env
        secretctl get app-dev
        secretctl search 'app-(dev|stg|prd|sdx)'
        secretctl update app-dev /tmp/secrets/app-dev-v2.env
        secretctl patch app-dev /tmp/secrets/app-dev-v2.patch
        secretctl disable app-dev 1
        secretctl enable app-dev 1
        secretctl delete app-dev
        secretctl diff app-dev app-stg
        secretctl find 'app-(dev|stg)' MONGODB
    "
    exit 0
}

function parse_commands() {
    while [[ "$#" -gt 0 ]]; do
        case $1 in
            # -p|--project)
            #     GCP_PROJECT_ID="$2"
            #     shift 2
            # ;;
            help)
                usage
            ;;
            list|search|create|get|update|patch|disable|enable|delete|diff|find)
                export COMMAND=$1
                shift
            ;;
            *)
                echo "Unknwon option: $1"
                usage
            ;;
        esac
        [ -z "${COMMAND}" ] && usage



        if [[ $(echo "$@" | grep -cE '\-p|--project') -eq 1 ]]; then
            export GCP_PROJECT_ID=$(echo "$@" | sed -E "s/.*(-p|--project) ([a-z0-9_.-]{1,}).*/\2/g; s/( ){1,}//g")
            export NEW_ARGS=$(echo "$@" | sed -E "s/(-p|--project) ([a-z0-9_.-]{1,})//g; s/( ){1,}//g")
            set -- "${NEW_ARGS}"
        else
            export GCP_PROJECT_ID=$(gcloud config get project 2> /dev/null)
        fi



        case "${COMMAND}" in
            help)
                usage
            ;;
            list)
                list_secrets
                break
            ;;
            search)
                if [ $# -ne 1 ]; then
                    echo "Please, provide the: pattern"
                    echo "Example: secretctl search 'app-(dev|stg|prd|sdx)'"
                    usage
                fi

                PATTERN="$1"
                search_for_secret "${PATTERN}"
                break
            ;;
            create)
                if [ $# -ne 2 ]; then
                    echo "Please, provide the: secret_name and secret_file"
                    echo "Example: secretctl create app-dev /tmp/secrets/app-dev-v1.env"
                    usage
                fi

                SECRET_NAME="$1"
                SECRET_FILE="$2"
                create_secret "${SECRET_NAME}" "${SECRET_FILE}"
                break
            ;;
            get)
                if [ $# -ne 1 ]; then
                    echo "Please, provide the: secret_name"
                    echo "Example: secretctl get app-dev"
                    usage
                fi

                SECRET_NAME="$1"
                get_secret "${SECRET_NAME}"
                break
            ;;
            update)
                if [[ $(echo "$@" | grep -cE '\-d |--disable ') -eq 1 ]]; then
                    DISABLE=true
                    MAX_ARGS=3
                else
                    DISABLE=false
                    MAX_ARGS=2
                fi


                if [ $# -ne "${MAX_ARGS}" ]; then
                    echo "Please, provide the: secret_name and secret_file"
                    echo "Example: secretctl update app-dev /tmp/secrets/app-dev-v2.env"
                    usage
                fi

                if [[ "${DISABLE}" == "true" ]]; then
                    NEW_ARGS=$(echo "$@" | sed -E "s/(-d |--disable )//g")
                    set -- ${NEW_ARGS}

                SECRET_NAME="$1"
                SECRET_FILE="$2"
                update_secret "${SECRET_NAME}" "${SECRET_FILE}"

                    PREVIOUS_VERSION=$(gcloud secrets versions list "${SECRET_NAME}" --format json | jq -r '[.[]|select(.state == "ENABLED").name | split("/")[-1]][1]')
                    [[ "${PREVIOUS_VERSION}" != "null" ]] && disable_secret "${SECRET_NAME}" "${PREVIOUS_VERSION}"
                else
                    SECRET_NAME="$1"
                    SECRET_FILE="$2"
                    update_secret "${SECRET_NAME}" "${SECRET_FILE}"
                fi

                break
            ;;
            patch)
                if [[ $(echo "$@" | grep -cE '\-d |--disable ') -eq 1 ]]; then
                    DISABLE=true
                    MAX_ARGS=3
                else
                    DISABLE=false
                    MAX_ARGS=2
                fi


                if [ $# -ne "${MAX_ARGS}" ]; then
                    echo "Please, provide the: secret_name and patch_file"
                    echo "Example: secretctl patch app-dev /tmp/secrets/app-dev-v2.patch"
                    usage
                fi

                if [[ "${DISABLE}" == "true" ]]; then
                    NEW_ARGS=$(echo "$@" | sed -E "s/(-d |--disable )//g")
                    set -- ${NEW_ARGS}

                    SECRET_NAME="$1"
                    SECRET_FILE="$2"
                    patch_secret "${SECRET_NAME}" "${SECRET_FILE}"

                    PREVIOUS_VERSION=$(gcloud secrets versions list "${SECRET_NAME}" --format json | jq -r '[.[]|select(.state == "ENABLED").name | split("/")[-1]][1]')
                    [[ "${PREVIOUS_VERSION}" != "null" ]] && disable_secret "${SECRET_NAME}" "${PREVIOUS_VERSION}"
                else
                    SECRET_NAME="$1"
                    SECRET_FILE="$2"
                    patch_secret "${SECRET_NAME}" "${SECRET_FILE}"
                fi

                break
            ;;
            disable)
                if [ $# -ne 2 ]; then
                    echo "Please, provide the: secret_name and secret_version"
                    echo "Example: secretctl disable app-dev 2"
                    usage
                fi

                SECRET_NAME="$1"
                SECRET_VERSION="$2"
                disable_secret "${SECRET_NAME}" "${SECRET_VERSION}"
                break
            ;;
            enable)
                if [ $# -ne 2 ]; then
                    echo "Please, provide the: secret_name and secret_version"
                    echo "Example: secretctl enable app-dev 1"
                    usage
                fi

                SECRET_NAME="$1"
                SECRET_VERSION="$2"
                enable_secret "${SECRET_NAME}" "${SECRET_VERSION}"
                break
            ;;
            delete)
                if [ $# -ne 1 ]; then
                    echo "Please, provide the: secret_name"
                    echo "Example: secretctl delete app-dev"
                    usage
                fi

                SECRET_NAME="$1"
                delete_secret "${SECRET_NAME}"
                break
            ;;
            diff)
                if [ $# -ne 2 ]; then
                    echo "Please, provide the: secret_1 and secret_2"
                    echo "Example: secretctl diff /tmp/secrets/app-dev-v1.env /tmp/secrets/app-dev-v2.env"
                    usage
                fi

                SECRET_NAME_1="$1"
                SECRET_NAME_2="$2"
                diff_secrets "${SECRET_NAME_1}" "${SECRET_NAME_2}"
                break
            ;;
            find)
                if [ $# -ne 2 ]; then
                    echo "Please, provide the: secret_name_pattern and data_pattern"
                    echo "Example: secretctl find app-(dev|stg) MONGODB"
                    usage
                fi

                SECRET_NAME_PATTERN="$1"
                DATA_PATTERN="$2"
                find_secret "${SECRET_NAME_PATTERN}" "${DATA_PATTERN}"
                break
            ;;
            *)
                usage
                break
            ;;
        esac
    done
}



## ---------- FUNCTIONS
## ----- UTILS
function diff_content() {
    SECRET_1_CONTENT=$1
    SECRET_2_CONTENT=$2

    function check_content_type() {
        [ $(echo "${SECRET_1_CONTENT}" | grep -cE "[A-Z_0-9]=.*") -ge 1 ] && SECRET_1_CONTENT_TYPE="dotenv"
        [ $(echo "${SECRET_2_CONTENT}" | grep -cE "[A-Z_0-9]=.*") -ge 1 ] && SECRET_2_CONTENT_TYPE="dotenv"
        [[ "${SECRET_1_CONTENT_TYPE}" == "${SECRET_1_CONTENT_TYPE}" ]] && SECRET_TYPE="dotenv"
        [[ "${SECRET_TYPE}" == dotenv ]] && SECRET_TYPE_CHECK=1 || SECRET_TYPE_CHECK=0
        [[ "${SECRET_TYPE_CHECK}" -eq 0 ]] && echo "[FAIL] - The secret types dont match: secret-1[${SECRET_1_CONTENT_TYPE}] and secret-2[${SECRET_2_CONTENT_TYPE}]" && exit 0
    }

    function check_duplicated_keys() {
        SECRET_1_KEYS=$(echo "${SECRET_1_CONTENT}" | cut -d "=" -f1 | uniq -d)
        SECRET_2_KEYS=$(echo "${SECRET_2_CONTENT}" | cut -d "=" -f1 | uniq -d)
        if [[ $(echo "${SECRET_1_KEYS}" | wc -l) -eq 0 ]] && [[ $(echo "${SECRET_2_KEYS}" | wc -l) -eq 0 ]]; then
            loggger "WARN" "check_duplicated_keys" "[FAIL] - There are some duplicated keys in both secret-1 and secret-2"
            echo -e "\n----- secret-1:\n${SECRET_1_KEYS}\n"
            echo -e "\n----- secret-2:\n${SECRET_2_KEYS}\n"
            exit 0
        fi
        [[ $(echo "${SECRET_1_KEYS}" | sed '/^$/d' | wc -l) -gt 1 ]] && logger "WARN" "check_missing_keys" "[FAIL] - There are some duplicated keys on secret-1:\n${SECRET_1_KEYS}" && exit 0
        [[ $(echo "${SECRET_2_KEYS}" | sed '/^$/d' | wc -l) -gt 1 ]] && logger "WARN" "check_missing_keys" "[FAIL] - There are some duplicated keys on secret-2:\n${SECRET_1_KEYS}" && exit 0
    }

    function check_missing_keys() {
        SECRET_1_KEYS=$(echo "${SECRET_1_CONTENT}" | cut -d "=" -f1 | sort | wc -l)
        SECRET_2_KEYS=$(echo "${SECRET_2_CONTENT}" | cut -d "=" -f1 | sort | wc -l)
        KEYS_CHECK=$([ "${SECRET_1_KEYS}" -eq "${SECRET_2_KEYS}" ] && echo 1 || echo 0)
        MISSING_KEYS_COUNT=0
        if [[ "${KEYS_CHECK}" -eq 0 ]]; then
            SECRET_1_MISSING_KEYS=()
            SECRET_2_MISSING_KEYS=()
            for s1_line in $(echo "${SECRET_1_CONTENT}"); do
                for s2_line in $(echo "${SECRET_2_CONTENT}"); do
                    if [[ "${s1_line}" != "${s2_line}" ]]; then
                        [ "${SECRET_1_KEYS}" -gt "${SECRET_2_KEYS}" ] && SECRET_2_MISSING_KEYS+=("missing-on-s2: ${s1_line}")
                        [ "${SECRET_2_KEYS}" -gt "${SECRET_1_KEYS}" ] && SECRET_1_MISSING_KEYS+=("missing-on-s1: ${s2_line}")
                        MISSING_KEYS_COUNT=$((MISSING_KEYS_COUNT + 1))
                    fi
                done
            done
        fi
        [ "${MISSING_KEYS_COUNT}" -eq 0 ] && MISSING_KEYS_CHECK=1 || MISSING_KEYS_CHECK=0
        [[ "${MISSING_KEYS_CHECK}" -eq 0 ]] && logger "WARN" "check_missing_keys" "[FAIL] - There are some missing keys:\n${UNMATCHED_FIELDS@}" && exit 0
    }

    function check_key_values() {
        # Convert the multiline variables into arrays
        arr1=()
        while IFS= read -r line; do arr1+=("$line"); done <<< "${SECRET_1_CONTENT}"
        arr2=()
        while IFS= read -r line; do arr2+=("$line"); done <<< "${SECRET_2_CONTENT}"

        # Create associative arrays to hold the key-value pairs
        declare -A map1
        declare -A map2

        # Populate the associative arrays
        for line in "${arr1[@]}"; do
            key="${line%%=*}"
            value="${line#*=}"
            map1["$key"]="$value"
        done

        for line in "${arr2[@]}"; do
            key="${line%%=*}"
            value="${line#*=}"
            map2["$key"]="$value"
        done

        # Compare the key-value pairs and print the differences
        for key in "${!map1[@]}"; do
            if [[ "${map1[$key]}" != "${map2[$key]}" ]]; then
                echo "$key=${map1[$key]} | $key=${map2[$key]}"
            fi
        done | column -t

        # Check for keys that might be in file but not in secret
        for key in "${!map2[@]}"; do
            if [[ -z "${map1[$key]}" ]]; then
                echo "$key=<not present> | $key=${map2[$key]}"
            fi
        done | column -t
    }

    check_content_type
    check_duplicated_keys
    check_missing_keys
    check_key_values
}

function check_secret_exists() {
    PATTERN=$1

    FOUND=$(gcloud secrets list \
        --project="${GCP_PROJECT_ID}" \
        --filter="name ~ secrets/${PATTERN}$" \
        --format=json | jq length)
    [[ "${FOUND}" -eq 1 ]]  && echo 1 || echo 0
}

## ----- CORE
function list_secrets() {
    gcloud secrets list \
        --project="${GCP_PROJECT_ID}"
}

function search_for_secret() {
    PATTERN=$1
    gcloud secrets list \
        --project="${GCP_PROJECT_ID}" \
        --format=json | \
            jq '.[].name | split("/")[3]' | \
            grep -E --color "${SEARCH_PATTERN}" | \
            tr -d '"' 
}

function create_secret() {
    SECRET_NAME="$1"
    SECRET_FILE="$2"

    [ ! -f "${SECRET_FILE}" ] && logger "WARN" "create_secret" "file not found: ${SECRET_FILE}" && exit 1

    logger "INFO" "create_secret" "Creating secret: ${SECRET_NAME}"
    gcloud secrets create "${SECRET_NAME}" \
        --data-file="${SECRET_FILE}" \
        --project="${GCP_PROJECT_ID}" &> /dev/null
    logger "INFO" "create_secret" "Secret created"
}

function get_secret() {
    SECRET_NAME="$1"

    [ $(check_secret_exists "${SECRET_NAME}") -eq 0 ] && logger "WARN" "get_secret" "Secret not found: ${SECRET_NAME}" && exit 1

    gcloud secrets versions access latest \
        --secret="${SECRET_NAME}" \
        --project="${GCP_PROJECT_ID}"
}

function update_secret() {
    SECRET_NAME="$1"
    SECRET_FILE="$2"

    [ ! -f "${SECRET_FILE}" ] && logger "WARN" "create_secret" "file not found: ${SECRET_FILE}" && exit 1
    [ $(check_secret_exists "${SECRET_NAME}") -eq 0 ] && logger "WARN" "update_secret" "Secret not found: ${SECRET_NAME}" && exit 1

    logger "INFO" "update_secret" "Updating the secret: ${SECRET_NAME}"
    gcloud secrets versions add "${SECRET_NAME}" \
        --data-file="${SECRET_FILE}" \
        --project="${GCP_PROJECT_ID}" &> /dev/null
    logger "INFO" "update_secret" "Secret updated"
}

function patch_secret() {
    SECRET_NAME="$1"
    PATCH_FILE="$2"

    [ ! -f "${PATCH_FILE}" ] && logger "WARN" "patch_secret" "File not found: ${PATCH_FILE}" && exit 1
    [ $(check_secret_exists "${SECRET_NAME}") -eq 0 ] && logger "WARN" "patch_secret" "Secret not found: ${SECRET_NAME}" && exit 1

    OLD_CONTENT="/tmp/${SECRET_NAME}.old"
    NEW_CONTENT="/tmp/${SECRET_NAME}.new"
    rm -f "${OLD_CONTENT}" "${NEW_CONTENT}"

    logger "DEBUG" "patch_secret" "Getting the current secret content"
    get_secret "${SECRET_NAME}" > "${OLD_CONTENT}"

    cp "${OLD_CONTENT}" "${NEW_CONTENT}"

    logger "DEBUG" "patch_secret" "Processing patch file"
    while IFS= read -r line; do
        if [[ "${line}" =~ ^- ]]; then
            line_key=$(echo "${line}" | cut -d"-" -f2 | cut -d "=" -f1)            
            sed -i "/^${line_key}=.*/d" "${NEW_CONTENT}"
        else
        line_key=$(echo "${line}" | cut -d"=" -f1)
            if grep -q "^${line_key}=" "${NEW_CONTENT}"; then
                sed -i "s|^${line_key}=.*|${line}|g" "${NEW_CONTENT}"
            else
                echo "${line}" >> "${NEW_CONTENT}"
            fi
        fi
    done < "${PATCH_FILE}"

    logger "DEBUG" "patch_secret" "Comparing old and new secret contents"
    if diff -q "${OLD_CONTENT}" "${NEW_CONTENT}" >/dev/null; then
        logger "WARN" "patch_secret" "No changes to be done here"
        exit 0
    else
        logger "DEBUG" "patch_secret" "Updating secret with new content"
    update_secret "${SECRET_NAME}" "${NEW_CONTENT}"
    fi

    rm -f "${OLD_CONTENT}" "${NEW_CONTENT}"
}

function disable_secret() {
    SECRET_NAME=$1
    SECRET_VERSION=$2

    [ $(check_secret_exists "${SECRET_NAME}") -eq 0 ] && echo "Secret not found: ${SECRET_NAME}" && exit 1

    logger "INFO" "disable_secret" "Disabling secret version: ${SECRET_NAME}[${SECRET_VERSION}]"
    gcloud secrets versions disable "${SECRET_VERSION}" \
        --secret="${SECRET_NAME}" \
        --project="${GCP_PROJECT_ID}" &> /dev/null
    logger "INFO" "disable_secret" "Secret version disabled"
}

function enable_secret() {
    SECRET_NAME=$1
    SECRET_VERSION=$2

    [ $(check_secret_exists "${SECRET_NAME}") -eq 0 ] && echo "Secret not found: ${SECRET_NAME}" && exit 1

    logger "INFO" "enable_secret" "Enabling secret version: ${SECRET_NAME}[${SECRET_VERSION}]"
    gcloud secrets versions enable "${SECRET_VERSION}" \
        --secret="${SECRET_NAME}" \
        --project="${GCP_PROJECT_ID}" &> /dev/null
    logger "INFO" "enable_secret" "Secret version enabled"
}

function delete_secret() {
    SECRET_NAME=$1

    [ $(check_secret_exists "${SECRET_NAME}") -eq 0 ] && echo "Secret not found: ${SECRET_NAME}" && exit 1

    logger "INFO" "delete_secret" "Deleting secret: ${SECRET_NAME}"
    yes | gcloud secrets delete "${SECRET_NAME}" \
        --project="${GCP_PROJECT_ID}" &> /dev/null
    logger "INFO" "delete_secret" "Secret deleted"
}

function diff_secrets() {
    SECRET_NAME_1=$1
    SECRET_NAME_2=$2

    [ $(check_secret_exists "${SECRET_NAME_1}") -eq 0 ] && echo "Secret not found: ${SECRET_NAME_1}" && exit 1
    [ $(check_secret_exists "${SECRET_NAME_2}") -eq 0 ] && echo "Secret not found: ${SECRET_NAME_2}" && exit 1

    SECRET_1_CONTENT=$(get_secret "${SECRET_NAME_1}" | sort)
    SECRET_2_CONTENT=$(get_secret "${SECRET_NAME_2}" | sort)

    diff_content "${SECRET_1_CONTENT}" "${SECRET_2_CONTENT}"
}

function find_secret() {
    SECRET_NAME_PATTERN="$1"
    DATA_PATTERN="$2"

    SECRETS_WITH_MATHED_NAME=0
    SECRETS_WITH_MATHED_CONTENT=0
    for secret in $(search_for_secret "${SECRET_NAME_PATTERN}"); do
        TMP_SECRET="/tmp/secret-${secret}.tmp"
        get_secret "${secret}" | grep -E "${DATA_PATTERN}" > "${TMP_SECRET}"
        [ -s "${TMP_SECRET}" ] && SECRETS_WITH_MATHED_CONTENT=$((SECRETS_WITH_MATHED_CONTENT + 1)) || rm -f "${TMP_SECRET}"
        SECRETS_WITH_MATHED_NAME=$((SECRETS_WITH_MATHED_NAME + 1))
    done

    if [ "${SECRETS_WITH_MATHED_CONTENT}" -ge 1 ]; then
        grep -EH "${DATA_PATTERN}" /tmp/secret-*.tmp | sed -E "s|/tmp/secret-(.*)\.tmp|\1|g" | grep --color -E "${DATA_PATTERN}"
    else
        logger "WARN" "find_secret" "Sorry, no secrets with this name pattern and this content pattern was found"
    fi

    rm -f /tmp/secret-*.tmp
}


## ---------- MAIN
if [ $# -lt 1 ]; then
    usage
else
    parse_commands "$@"
fi
